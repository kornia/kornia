on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '["3.10"]'
      pytorch-version:
        required: false
        type: string
        default: '["2.0.1"]'
      os:
        required: false
        type: string
        default: ubuntu-latest
      pytorch-dtype:
        required: false
        type: string
        default: 'float32'
      pytest-extra:
        required: false
        type: string
        default: ''
      continue-on-error:
        required: false
        type: boolean
        default: false
      fail-fast:
        required: false
        type: boolean
        default: false
      coverage:
        required: false
        type: boolean
        default: false

jobs:
  tests:
    name: python-${{ matrix.python-version }}, torch-${{ matrix.pytorch-version }}
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix:
        python-version: ${{ fromJSON(inputs.python-version) }}
        pytorch-version: ${{ fromJSON(inputs.pytorch-version) }}
        exclude:
          - pytorch-version: '1.9.1'
            python-version: '3.10'
          - pytorch-version: '1.10.2'
            python-version: '3.10'

    steps:
    - name: Checkout kornia
      uses: actions/checkout@v3

    - name: Setting environment on ${{ inputs.os }} with python ${{ matrix.python-version }} and pytorch ${{ matrix.pytorch-version }}
      uses: ./.github/actions/env
      with:
        python-version: ${{ matrix.python-version }}
        pytorch-version: ${{ matrix.pytorch-version }}

    - if: ${{ inputs.coverage == false}}
      name: Run CPU tests ${{ inputs.pytorch-dtype }}
      continue-on-error: ${{ inputs.continue-on-error }}
      shell: bash -l {0}
      run: pytest -v --device cpu --dtype ${{ inputs.pytorch-dtype }} ${{ inputs.pytest-extra }} ./test

    - if: ${{ inputs.coverage }}
      name: Run CPU tests coverage ${{ inputs.pytorch-dtype }}
      continue-on-error: ${{ inputs.continue-on-error }}
      shell: bash -l {0}
      run: |
        coverage erase
        coverage run -m pytest -v --device cpu --dtype ${{ inputs.pytorch-dtype }} ${{ inputs.pytest-extra }} ./test

    - if: ${{ inputs.coverage }}
      name: Coverage report
      shell: bash -l {0}
      run: |
        coverage xml -o coverage.xml  # Generate the xml for the codecov
        coverage report # Print the report

    - if: ${{ inputs.coverage }}
      name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }} # to not depend on build via GH API
        flags: cpu,${{ inputs.os }}_py-${{ matrix.python-version }}_pt-${{ matrix.pytorch-version }}_${{ inputs.pytorch-dtype }}
        name: cpu-coverage
