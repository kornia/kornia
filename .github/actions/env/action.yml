name: Setup Kornia dev environment
description: "Set up Python, PyTorch, and dependencies for Kornia development"

inputs:
  python-version:
    description: "The python version desired."
    required: true
    default: "3.13"

  pytorch-version:
    description: "The pytorch version desired."
    required: true
    default: "2.5.1"

  ref:
    description: "Git reference to checkout"
    default: ${{ github.sha }}

  fetch-depth:
    description: "Number of commits to fetch"
    default: "1"

  extra-deps:
    description: "Dependencies to be installed manually before installing kornia."
    default: ""
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install UV
      shell: bash
      run: pip install uv

    - name: Install just
      uses: extractions/setup-just@v3

    - if: ${{ contains(fromJson('["nightly"]'), inputs.pytorch-version ) }}
      name: Install PyTorch nightly
      shell: bash
      run: uv pip install --system numpy --pre torch[dynamo] ${{ inputs.extra-deps }} --force-reinstall --extra-index-url https://download.pytorch.org/whl/nightly/cpu/

    - if: ${{ contains(fromJson('["nightly"]'), inputs.pytorch-version ) == false}}
      name: Install pytorch
      shell: bash
      run:   |
             if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "Windows" ]; then
                uv pip install --system torch==${{ inputs.pytorch-version }}+cpu ${{ inputs.extra-deps }} --find-links https://download.pytorch.org/whl/torch
             else
                uv pip install --system torch==${{ inputs.pytorch-version }} ${{ inputs.extra-deps }} --find-links https://download.pytorch.org/whl/torch
             fi

    - if: ${{ contains(fromJson('["1.9.1", "1.10.2", "1.11.0", "1.12.1", "1.13.1", "2.0.1", "2.1.2", "2.2.2"]'), inputs.pytorch-version) }}
      name: Install numpy for old torchs
      shell: bash
      run: uv pip install --system "numpy<2.0.0"

    - name: Install Kornia dev
      shell: bash
      run: |
        # For Linux/Windows runners, CPU-only PyTorch is installed (no GPU dependencies needed)
        # For macOS runners, standard PyTorch is used (can include GPU dependencies)
        if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "Windows" ]; then
          echo "Installing for CPU-only (Linux/Windows runners)..."
          uv pip install --system --editable .[dev]
        else
          echo "Installing with GPU dependencies (macOS runner)..."
          uv pip install --system --editable .[dev,x]
        fi

    - name: Verify lock file is up to date
      shell: bash
      run: |
        if [ -f "uv.lock" ]; then
          echo "Checking if uv.lock is up to date..."
          uv lock --check
        else
          echo "No uv.lock found, skipping lock file verification"
        fi
    - name: Handle compatibility for older PyTorch versions
      shell: bash
      run: |
        PYTORCH_VERSION="${{ inputs.pytorch-version }}"

        # Install compatible transformers for PyTorch < 2.3
        if [[ $(python -c "
        import packaging.version as pv
        print(pv.parse('$PYTORCH_VERSION') < pv.parse('2.3.0'))
        ") == "True" ]]; then
          echo "Installing compatible transformers for PyTorch $PYTORCH_VERSION"
          uv pip install --system "transformers<4.35.0"
        fi

        # Ensure accelerate is installed (should come from kornia[x] but verify)
        python -c "import accelerate" 2>/dev/null || uv pip install --system accelerate

    - name: Check torch version
      shell: bash
      run: |
        INSTALLED_VERSION=$(python -c "import torch; print(torch.__version__)")
        echo "Installed PyTorch version: $INSTALLED_VERSION"
        echo "Requested PyTorch version: ${{ inputs.pytorch-version }}"
        # For PyTorch 1.9.1, accelerate may upgrade to a newer version
        if [[ "${{ inputs.pytorch-version }}" == "1.9.1" && "$INSTALLED_VERSION" != "1.9.1" ]]; then
          echo "PyTorch 1.9.1 was upgraded by accelerate to $INSTALLED_VERSION"
        else
          pip show torch | grep ${{ inputs.pytorch-version }} || false
        fi

    - name: Print dependencies and kornia version
      shell: bash
      run: |
        python -c "import torch;print('Pytorch version: ', torch.__version__)"
        python -c "import kornia;print('Kornia version: ', kornia.__version__)"
