import pytest

import kornia
import kornia.testing as utils  # test utils
from test.common import device

import torch
from torch.autograd import gradcheck
from torch.testing import assert_allclose


class TestRgbToLab:

    def test_rgb_to_lab(self, device):
        # prepare input data
        data = torch.tensor([[[0.38333333, 0.73039216, 0.10784314, 0.34215686],
                              [0.72647059, 0.42647059, 0.87549020, 0.55784314],
                              [0.65980392, 0.46078431, 0.73823529, 0.32745098],
                              [0.35686275, 0.39019608, 0.40686275, 0.15098039]],

                             [[0.32058824, 0.74509804, 0.11764706, 0.19117647],
                              [0.63431373, 0.22647059, 0.85098039, 0.55784314],
                              [0.60882353, 0.35882353, 0.67352941, 0.28627451],
                              [0.41960784, 0.45882353, 0.45000000, 0.13529412]],

                             [[0.25784314, 0.71176471, 0.11862745, 0.15980392],
                              [0.54313725, 0.14803922, 0.77549020, 0.53627451],
                              [0.53627451, 0.24215686, 0.58235294, 0.22549020],
                              [0.48137255, 0.51666667, 0.46568627, 0.10000000]]])

        expected = torch.tensor([[[3.59274310e+01, 7.64690137e+01, 1.10173535e+01, 2.48678215e+01],
                                  [6.79828577e+01, 3.03407791e+01, 8.67115312e+01, 5.89673374e+01],
                                  [6.47061464e+01, 4.07843024e+01, 7.10691109e+01, 3.16414341e+01],
                                  [4.44656299e+01, 4.83381325e+01, 4.75700851e+01, 1.36319945e+01]],

                                 [[3.94273792e+00, -2.86469390e+00, -1.10168405e+00, 1.65108971e+01],
                                  [4.94770822e+00, 2.04948755e+01, -1.11378288e+00, -1.05389885e+00],
                                  [1.63063907e+00, 6.42535426e+00, 2.15757497e+00, 1.65850768e+00],
                                  [-2.15306465e+00, -2.93085678e+00, -3.23132229e+00, 2.44515262e-02]],

                                 [[1.18775474e+01, 3.83187682e+00, -5.74790365e-01, 1.26316910e+01],
                                  [1.52721396e+01, 2.21936090e+01, 1.02435149e+01, 2.92478528e+00],
                                  [1.14246570e+01, 2.11669355e+01, 1.41306054e+01, 1.09158089e+01],
                                  [-1.07401481e+01, -1.02221296e+01, -3.61389968e+00, 6.75194740e+00]]])

        # move data to the device
        data = data.to(device)
        expected = expected.to(device)

        f = kornia.color.RgbToLab()
        assert_allclose(f(data), expected)

    def test_batch_rgb_to_lab(self, device):
        # prepare input data
        data = torch.tensor([[[[0.38333333, 0.73039216, 0.10784314, 0.34215686],
                               [0.72647059, 0.42647059, 0.87549020, 0.55784314],
                               [0.65980392, 0.46078431, 0.73823529, 0.32745098],
                               [0.35686275, 0.39019608, 0.40686275, 0.15098039]],

                              [[0.32058824, 0.74509804, 0.11764706, 0.19117647],
                               [0.63431373, 0.22647059, 0.85098039, 0.55784314],
                               [0.60882353, 0.35882353, 0.67352941, 0.28627451],
                               [0.41960784, 0.45882353, 0.45000000, 0.13529412]],

                              [[0.25784314, 0.71176471, 0.11862745, 0.15980392],
                               [0.54313725, 0.14803922, 0.77549020, 0.53627451],
                               [0.53627451, 0.24215686, 0.58235294, 0.22549020],
                               [0.48137255, 0.51666667, 0.46568627, 0.10000000]]]])

        expected = torch.tensor([[[[3.59274310e+01, 7.64690137e+01, 1.10173535e+01, 2.48678215e+01],
                                   [6.79828577e+01, 3.03407791e+01, 8.67115312e+01, 5.89673374e+01],
                                   [6.47061464e+01, 4.07843024e+01, 7.10691109e+01, 3.16414341e+01],
                                   [4.44656299e+01, 4.83381325e+01, 4.75700851e+01, 1.36319945e+01]],

                                  [[3.94273792e+00, -2.86469390e+00, -1.10168405e+00, 1.65108971e+01],
                                   [4.94770822e+00, 2.04948755e+01, -1.11378288e+00, -1.05389885e+00],
                                   [1.63063907e+00, 6.42535426e+00, 2.15757497e+00, 1.65850768e+00],
                                   [-2.15306465e+00, -2.93085678e+00, -3.23132229e+00, 2.44515262e-02]],

                                  [[1.18775474e+01, 3.83187682e+00, -5.74790365e-01, 1.26316910e+01],
                                   [1.52721396e+01, 2.21936090e+01, 1.02435149e+01, 2.92478528e+00],
                                   [1.14246570e+01, 2.11669355e+01, 1.41306054e+01, 1.09158089e+01],
                                   [-1.07401481e+01, -1.02221296e+01, -3.61389968e+00, 6.75194740e+00]]]])

        # move data to the device
        data = data.to(device)
        expected = expected.to(device)

        f = kornia.color.RgbToLab()
        out = f(data)
        assert_allclose(out, expected)

    def test_gradcheck(self, device):
        # prepare input data
        data = torch.tensor([[[0.38333333, 0.73039216, 0.10784314, 0.34215686],
                              [0.72647059, 0.42647059, 0.87549020, 0.55784314],
                              [0.65980392, 0.46078431, 0.73823529, 0.32745098],
                              [0.35686275, 0.39019608, 0.40686275, 0.15098039]],

                             [[0.32058824, 0.74509804, 0.11764706, 0.19117647],
                              [0.63431373, 0.22647059, 0.85098039, 0.55784314],
                              [0.60882353, 0.35882353, 0.67352941, 0.28627451],
                              [0.41960784, 0.45882353, 0.45000000, 0.13529412]],

                             [[0.25784314, 0.71176471, 0.11862745, 0.15980392],
                              [0.54313725, 0.14803922, 0.77549020, 0.53627451],
                              [0.53627451, 0.24215686, 0.58235294, 0.22549020],
                              [0.48137255, 0.51666667, 0.46568627, 0.10000000]]])

        data = torch.tensor([[[[3.59274310e+01, 7.64690137e+01, 1.10173535e+01, 2.48678215e+01],
                               [6.79828577e+01, 3.03407791e+01, 8.67115312e+01, 5.89673374e+01],
                               [6.47061464e+01, 4.07843024e+01, 7.10691109e+01, 3.16414341e+01],
                               [4.44656299e+01, 4.83381325e+01, 4.75700851e+01, 1.36319945e+01]],

                              [[3.94273792e+00, -2.86469390e+00, -1.10168405e+00, 1.65108971e+01],
                               [4.94770822e+00, 2.04948755e+01, -1.11378288e+00, -1.05389885e+00],
                               [1.63063907e+00, 6.42535426e+00, 2.15757497e+00, 1.65850768e+00],
                               [-2.15306465e+00, -2.93085678e+00, -3.23132229e+00, 2.44515262e-02]],

                              [[1.18775474e+01, 3.83187682e+00, -5.74790365e-01, 1.26316910e+01],
                               [1.52721396e+01, 2.21936090e+01, 1.02435149e+01, 2.92478528e+00],
                               [1.14246570e+01, 2.11669355e+01, 1.41306054e+01, 1.09158089e+01],
                               [-1.07401481e+01, -1.02221296e+01, -3.61389968e+00, 6.75194740e+00]]]])

        data = data.to(device)

        with torch.autograd.detect_anomaly():
            data = utils.tensor_to_gradcheck_var(data)  # to var
            #         printf("grad_check: %s\n", data)
            #         print(gradcheck(kornia.color.RgbToLab(), (data,), raise_exception=True))

            assert gradcheck(kornia.color.RgbToLab(), (data,),
                             raise_exception=True)

    @pytest.mark.skip(reason="turn off all jit for a while")
    def test_jit(self, device):
        @torch.jit.script
        def op_script(data: torch.Tensor) -> torch.Tensor:
            return kornia.rgb_to_lab(data)

            data = torch.tensor([[[1., 1.],
                                  [1., 1.]],

                                 [[2., 2.],
                                  [2., 2.]],

                                 [[3., 3.],
                                  [3., 3.]]])  # 3x2x2

            data = data.to(device)

            actual = op_script(data)
            expected = kornia.rgb_to_lab(data)
            assert_allclose(actual, expected)


class TestLabToRgb:

    def test_lab_to_rgb(self, device):
        expected = torch.tensor([[[0.38333333, 0.73039216, 0.10784314, 0.34215686],
                                  [0.72647059, 0.42647059, 0.87549020, 0.55784314],
                                  [0.65980392, 0.46078431, 0.73823529, 0.32745098],
                                  [0.35686275, 0.39019608, 0.40686275, 0.15098039]],

                                 [[0.32058824, 0.74509804, 0.11764706, 0.19117647],
                                  [0.63431373, 0.22647059, 0.85098039, 0.55784314],
                                  [0.60882353, 0.35882353, 0.67352941, 0.28627451],
                                  [0.41960784, 0.45882353, 0.45000000, 0.13529412]],

                                 [[0.25784314, 0.71176471, 0.11862745, 0.15980392],
                                  [0.54313725, 0.14803922, 0.77549020, 0.53627451],
                                  [0.53627451, 0.24215686, 0.58235294, 0.22549020],
                                  [0.48137255, 0.51666667, 0.46568627, 0.10000000]]])

        data = torch.tensor([[[3.59274310e+01, 7.64690137e+01, 1.10173535e+01, 2.48678215e+01],
                              [6.79828577e+01, 3.03407791e+01, 8.67115312e+01, 5.89673374e+01],
                              [6.47061464e+01, 4.07843024e+01, 7.10691109e+01, 3.16414341e+01],
                              [4.44656299e+01, 4.83381325e+01, 4.75700851e+01, 1.36319945e+01]],

                             [[3.94273792e+00, -2.86469390e+00, -1.10168405e+00, 1.65108971e+01],
                              [4.94770822e+00, 2.04948755e+01, -1.11378288e+00, -1.05389885e+00],
                              [1.63063907e+00, 6.42535426e+00, 2.15757497e+00, 1.65850768e+00],
                              [-2.15306465e+00, -2.93085678e+00, -3.23132229e+00, 2.44515262e-02]],

                             [[1.18775474e+01, 3.83187682e+00, -5.74790365e-01, 1.26316910e+01],
                              [1.52721396e+01, 2.21936090e+01, 1.02435149e+01, 2.92478528e+00],
                              [1.14246570e+01, 2.11669355e+01, 1.41306054e+01, 1.09158089e+01],
                              [-1.07401481e+01, -1.02221296e+01, -3.61389968e+00, 6.75194740e+00]]])

        # move data to the device
        data = data.to(device)
        expected = expected.to(device)

        f = kornia.color.LabToRgb()
        assert_allclose(f(data), expected)

    def test_batch_lab_to_rgb(self, device):
        # prepare input data
        expected = torch.tensor([[[[0.38333333, 0.73039216, 0.10784314, 0.34215686],
                                   [0.72647059, 0.42647059, 0.87549020, 0.55784314],
                                   [0.65980392, 0.46078431, 0.73823529, 0.32745098],
                                   [0.35686275, 0.39019608, 0.40686275, 0.15098039]],

                                  [[0.32058824, 0.74509804, 0.11764706, 0.19117647],
                                   [0.63431373, 0.22647059, 0.85098039, 0.55784314],
                                   [0.60882353, 0.35882353, 0.67352941, 0.28627451],
                                   [0.41960784, 0.45882353, 0.45000000, 0.13529412]],

                                  [[0.25784314, 0.71176471, 0.11862745, 0.15980392],
                                   [0.54313725, 0.14803922, 0.77549020, 0.53627451],
                                   [0.53627451, 0.24215686, 0.58235294, 0.22549020],
                                   [0.48137255, 0.51666667, 0.46568627, 0.10000000]]]])

        data = torch.tensor([[[[3.59274310e+01, 7.64690137e+01, 1.10173535e+01, 2.48678215e+01],
                               [6.79828577e+01, 3.03407791e+01, 8.67115312e+01, 5.89673374e+01],
                               [6.47061464e+01, 4.07843024e+01, 7.10691109e+01, 3.16414341e+01],
                               [4.44656299e+01, 4.83381325e+01, 4.75700851e+01, 1.36319945e+01]],

                              [[3.94273792e+00, -2.86469390e+00, -1.10168405e+00, 1.65108971e+01],
                               [4.94770822e+00, 2.04948755e+01, -1.11378288e+00, -1.05389885e+00],
                               [1.63063907e+00, 6.42535426e+00, 2.15757497e+00, 1.65850768e+00],
                               [-2.15306465e+00, -2.93085678e+00, -3.23132229e+00, 2.44515262e-02]],

                              [[1.18775474e+01, 3.83187682e+00, -5.74790365e-01, 1.26316910e+01],
                               [1.52721396e+01, 2.21936090e+01, 1.02435149e+01, 2.92478528e+00],
                               [1.14246570e+01, 2.11669355e+01, 1.41306054e+01, 1.09158089e+01],
                               [-1.07401481e+01, -1.02221296e+01, -3.61389968e+00, 6.75194740e+00]]]])

        # move data to the device
        data = data.to(device)
        expected = expected.to(device)

        f = kornia.color.LabToRgb()
        out = f(data)
        assert_allclose(out, expected)

    def test_gradcheck(self, device):
        data = torch.tensor([[[[3.59274310e+01, 7.64690137e+01, 1.10173535e+01, 2.48678215e+01],
                               [6.79828577e+01, 3.03407791e+01, 8.67115312e+01, 5.89673374e+01],
                               [6.47061464e+01, 4.07843024e+01, 7.10691109e+01, 3.16414341e+01],
                               [4.44656299e+01, 4.83381325e+01, 4.75700851e+01, 1.36319945e+01]],

                              [[3.94273792e+00, -2.86469390e+00, -1.10168405e+00, 1.65108971e+01],
                               [4.94770822e+00, 2.04948755e+01, -1.11378288e+00, -1.05389885e+00],
                               [1.63063907e+00, 6.42535426e+00, 2.15757497e+00, 1.65850768e+00],
                               [-2.15306465e+00, -2.93085678e+00, -3.23132229e+00, 2.44515262e-02]],

                              [[1.18775474e+01, 3.83187682e+00, -5.74790365e-01, 1.26316910e+01],
                               [1.52721396e+01, 2.21936090e+01, 1.02435149e+01, 2.92478528e+00],
                               [1.14246570e+01, 2.11669355e+01, 1.41306054e+01, 1.09158089e+01],
                               [-1.07401481e+01, -1.02221296e+01, -3.61389968e+00, 6.75194740e+00]]]])

        # prepare input data
        data = torch.tensor([[[1., 1.],
                              [1., 1.]],

                             [[2., 2.],
                              [2., 2.]],

                             [[3., 3.],
                              [3., 3.]]])  # 3x2x2

        data = data.to(device)

        with torch.autograd.detect_anomaly():
            data = utils.tensor_to_gradcheck_var(data)  # to var
            #         printf("grad_check: %s\n", data)
            #         print(gradcheck(kornia.color.LabToRgb(), (data,), raise_exception=True))

            assert gradcheck(kornia.color.LabToRgb(), (data,),
                             raise_exception=True)

    @pytest.mark.skip(reason="turn off all jit for a while")
    def test_jit(self):
        @torch.jit.script
        def op_script(data: torch.Tensor) -> torch.Tensor:
            return kornia.lab_to_rgb(data)

            data = torch.tensor([[[1., 1.],
                                  [1., 1.]],

                                 [[2., 2.],
                                  [2., 2.]],

                                 [[3., 3.],
                                  [3., 3.]]])  # 3x2x2

            data = data.to(device)

            actual = op_script(data)
            expected = kornia.lab_to_rgb(data)
            assert_allclose(actual, expected)